pipeline
{
    agent any
    environment
    {
      nuget = "C:\\Sathish_HandsOn\\Jekins_Data_nuget\\nuget.exe"
      dotnet ='C:\\Program Files (x86)\\dotnet\\'
	  
	  PROJECT_ID  = 'dps-parent-project'
	  CLUSTER_NAME ='k8s-cluster-1'
	  LOCATION ='us-central1'
	  CREDENTIALS_ID ='dps-gsr-credentials'
	 
      }
   
    stages
    {
 stage('WorkSpace Clean up Stage')
        {
            steps{
                
                bat 'echo Clean up Stage'
                cleanWs()
          
            }
            
        }
 stage('Git Checkout Stage')
        {
            steps{
                
               bat  'echo Git Checkout Stage'
               checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/sathishkumar130913/ForecastApp.BradyTech.git']]])
               
            }
            
        }
		stage('Pakages Restore Stage')
        {
            steps{
                
                bat ' echo Restore Pakages Stage'
                bat '%nuget% restore DockerSupport.sln'                
               
            }
            
        }
        
stage('Build Stage')
        {
            steps{
                
                bat  'echo Build Stage'
                bat "\"${tool 'MSBuild'}\" -verbosity:detailed ForecastApp.BradyTech.sln /p:Configuration=Release /p:Platform=\"Any CPU\""
            }
            
        }
        stage('Test Execution Stage')
        {
            steps{
                
                bat  'echo Test Execution Stage'
                bat "\"${tool 'VSTest'}\"  ForcastApp.IntergerationTest/bin/Release/netcoreapp3.1/ForcastApp.IntergerationTest.dll /InIsolation /Logger:html"
                bat  'echo Test Execution Completed'
                 }
            
        }
stage('Build Docker Image Stage')
 {
 steps{
    script {
             bat ' echo build image Stage'
	         dockerImage = docker.build("gcr.io/dps-parent-project/ed-app:${env.BUILD_NUMBER}")
	        
         }
    }
		
  }
  
   stage('Push Image to G-Cloud Container Registry') 
   {
        steps {
            
             bat 'echo push image to Google-cloud Registry'
            script 
			{
               docker.withRegistry('https://gcr.io', 'gcr:dps-gsr-credentials') 
                {
              dockerImage.push()
                }
           }
        }
    }
 stage('Deploy Image to G-Kubernetes Cluster')
 {
		    steps{
			    echo "Deployment started ..."
			    sh 'ls -ltr'
			    sh 'pwd'
			    
			    sh "sed -i 's/tagversion/${env.BUILD_ID}/g' deployment.yml"
			    sh "sed -i 's/tagversion/${env.BUILD_ID}/g' Service.yml"
				
				
				echo "Start deployment of Deployment.yml"
				step([$class: 'KubernetesEngineBuilder', projectId: env.PROJECT_ID, clusterName: env.CLUSTER_NAME, location: env.LOCATION, manifestPattern: 'deployment.yml', credentialsId: env.CREDENTIALS_ID, verifyDeployments: false])
		
				echo "Start deployment of Service.yml"
			    step([$class: 'KubernetesEngineBuilder', projectId: env.PROJECT_ID, clusterName: env.CLUSTER_NAME, location: env.LOCATION, manifestPattern: 'Service.yml', credentialsId: env.CREDENTIALS_ID, verifyDeployments: false])
		    
				
				
			   
			    echo "Deployment Finished ..."
		    }
	    }  
	    
	    stage('Release Email Trigger Stage')
        {
            steps{
                
                bat  'echo Release Email Stage'
                 }
            
        }

}
    
}